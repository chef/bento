require File.dirname(__FILE__) + "/../.common/session.rb"

FREEBSD_SESSION =
  COMMON_SESSION.merge({ :boot_cmd_sequence =>
                         [
                          '<Esc>',
                          'load geom_mbr',
                          '<Enter>',
                          'load zfs',
                          '<Enter>',
                          'boot -s',
                          '<Enter>',
                          '<Wait><Wait><Wait><Wait><Wait><Wait><Wait><Wait><Wait><Wait>',
                          '/bin/sh<Enter>',
                          'mdmfs -s 10m md1 /tmp<Enter>',
                          'dhclient -l /tmp/dhclient.lease.em0 em0<Enter>',
                          '<Wait><Wait><Wait>',
                          # See http://www.aisecure.net/2011/05/01/root-on-zfs-freebsd-current/#comment-397
                          'gpart create -s gpt ada0<Enter>',
                          'gpart add -b 34 -s 64k -t freebsd-boot ada0<Enter>',
                          'gpart add -s 2G -t freebsd-swap -l swap0 ada0<Enter>',
                          'gpart add -t freebsd-zfs -l disk0 ada0<Enter>',
                          'gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada0<Enter>',
                          'zpool create zroot /dev/gpt/disk0<Enter>',
                          'zpool set bootfs=zroot zroot<Enter>',
                          'zfs set checksum=fletcher4 zroot<Enter>',
                          'zfs set mountpoint=/mnt zroot<Enter>',
                          'zfs create zroot/usr<Enter>',
                          'zfs create zroot/usr/home<Enter>',
                          'zfs create zroot/var<Enter>',
                          'zfs create -o compression=on -o exec=on -o setuid=off zroot/tmp<Enter>',
                          'zfs create -o compression=lzjb -o setuid=off zroot/usr/ports<Enter>',
                          'zfs create -o compression=off -o exec=off -o setuid=off zroot/usr/ports/distfiles<Enter>',
                          'zfs create -o compression=off -o exec=off -o setuid=off zroot/usr/ports/packages<Enter>',
                          'zfs create -o compression=lzjb -o exec=off -o setuid=off zroot/usr/src<Enter>',
                          'zfs create -o compression=lzjb -o exec=off -o setuid=off zroot/var/crash<Enter>',
                          'zfs create -o exec=off -o setuid=off zroot/var/db<Enter>',
                          'zfs create -o compression=lzjb -o exec=on -o setuid=off zroot/var/db/pkg<Enter>',
                          'zfs create -o exec=off -o setuid=off zroot/var/empty<Enter>',
                          'zfs create -o compression=lzjb -o exec=off -o setuid=off zroot/var/log<Enter>',
                          'zfs create -o compression=gzip -o exec=off -o setuid=off zroot/var/mail<Enter>',
                          'zfs create -o exec=off -o setuid=off zroot/var/run<Enter>',
                          'zfs create -o compression=lzjb -o exec=on -o setuid=off zroot/var/tmp<Enter>',
                          'zpool export zroot<Enter>',
                          'zpool import -o cachefile=/tmp/zpool.cache zroot<Enter>',
                          'chmod 1777 /mnt/tmp<Enter>',
                          'cd /mnt ; ln -s usr/home home<Enter>',
                          'chmod 1777 /mnt/var/tmp<Enter>',
                          # Install the OS
                          'cd /usr/freebsd-dist<Enter>',
                          'cat base.txz | tar --unlink -xpJf - -C /mnt<Enter>',
                          '<Wait><Wait><Wait><Wait><Wait><Wait><Wait><Wait><Wait>',
                          'cat lib32.txz | tar --unlink -xpJf - -C /mnt<Enter>',
                          '<Wait><Wait><Wait><Wait><Wait>',
                          'cat kernel.txz | tar --unlink -xpJf - -C /mnt<Enter>',
                          '<Wait><Wait><Wait><Wait><Wait><Wait><Wait><Wait><Wait>',
                          'cp /tmp/zpool.cache /mnt/boot/zfs/zpool.cache<Enter>',
                          # Enable required services
                          "echo 'zfs_enable=\"YES\"' >> /mnt/etc/rc.conf<Enter>",
                          "echo 'hostname=\"%NAME%\"' >> /mnt/etc/rc.conf<Enter>",
                          "echo 'ifconfig_em0=\"dhcp\"' >> /mnt/etc/rc.conf<Enter>",
                          "echo 'sshd_enable=\"YES\"' >> /mnt/etc/rc.conf<Enter>",
                          # Tune and boot from zfs
                          "echo 'zfs_load=\"YES\"' >> /mnt/boot/loader.conf<Enter>",
                          "echo 'vfs.root.mountfrom=\"zfs:zroot\"' >> /mnt/boot/loader.conf<Enter>",
                          "echo 'vm.kmem_size=\"200M\"' >> /mnt/boot/loader.conf<Enter>",
                          "echo 'vm.kmem_size_max=\"200M\"' >> /mnt/boot/loader.conf<Enter>",
                          "echo 'vfs.zfs.arc_max=\"40M\"' >> /mnt/boot/loader.conf<Enter>",
                          "echo 'vfs.zfs.vdev.cache.size=\"5M\"' >> /mnt/boot/loader.conf<Enter>",
                          # Enable swap
                          'echo "/dev/gpt/swap0 none swap sw 0 0" > /mnt/etc/fstab<Enter>',
                          # Set up user accounts
                          'zfs create zroot/usr/home/vagrant<Enter>',
                          'echo "vagrant" | pw -V /mnt/etc useradd vagrant -h 0 -s csh -G wheel -d /home/vagrant -c "Vagrant User"<Enter>',
                          'echo "vagrant" | pw -V /mnt/etc usermod root<Enter>',
                          'chown 1001:1001 /mnt/home/vagrant<Enter>',
                          # Finalize zfs
                          'zfs set readonly=on zroot/var/empty<Enter>',
                          'zfs umount -a<Enter>',
                          'zfs set mountpoint=legacy zroot<Enter>',
                          'zfs set mountpoint=/tmp zroot/tmp<Enter>',
                          'zfs set mountpoint=/usr zroot/usr<Enter>',
                          'zfs set mountpoint=/var zroot/var<Enter>',
                          # Reboot
                          'reboot<Enter>'
                         ],
                         :memory_size=> "512",
                         :os_type_id => 'FreeBSD_64' })
