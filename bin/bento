#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

Signal.trap("INT") { exit 1 }

$stdout.sync = true
$stderr.sync = true

require 'benchmark'
require 'digest'
require 'json'
require 'optparse'
require 'ostruct'
require 'tempfile'
require 'net/http'
require 'aws-sdk'
require 'kitchen'
require 'mixlib/shellout'
require 'erb'

class Options

  NAME = File.basename($0).freeze

  def self.parse(args)
    options = OpenStruct.new
    options.templates = calculate_templates("*.json")

    global = OptionParser.new do |opts|
      opts.banner = "Usage: #{NAME} [SUBCOMMAND [options]]"
      opts.separator ""
      opts.separator <<-COMMANDS.gsub(/^ {8}/, "")
        build        :   build one or more templates
        help         :   prints this help message
        list         :   list all templates in project
        normalize    :   normalize one or more templates
        test         :   test one or more builds with kitchen
        upload       :   upload one or more builds to Atlas and S3
        release      :   release a version of a box on Atlas
        revoke       :   revoke a version of a box on Atlas
        delete       :   delete a version of a box from Atlas
      COMMANDS
    end

    templates_argv_proc = proc { |options|
      options.templates = calculate_templates(args) unless args.empty?

      options.templates.each do |t|
        if !File.exists?("#{t}.json")
          $stderr.puts "File #{t}.json does not exist for template '#{t}'"
          exit(1)
        end
      end
    }

    box_version_argv_proc = proc { |options|
      options.box = ARGV[0]
      options.version = ARGV[1]
    }

    subcommand = {
      help: {
        parser: OptionParser.new {},
        argv: proc { |options|
          puts global
          exit(0)
        }
      },
      build: {
        class: BuildRunner,
        parser: OptionParser.new { |opts|
          opts.banner = "Usage: #{NAME} build [options] TEMPLATE[ TEMPLATE ...]"

          opts.on("-n", "--[no-]dry-run", "Dry run (what would happen)") do |opt|
            options.dry_run = opt
          end

          opts.on("-d", "--[no-]debug", "Run packer with debug output") do |opt|
            options.debug = opt
          end

          opts.on("-o BUILDS", "--only BUILDS", "Only build some Packer builds") do |opt|
            options.builds = opt
          end

          opts.on("-e BUILDS", "--except BUILDS", "Build all Packer builds except these") do |opt|
            options.except = opt
          end

          opts.on("-m MIRROR", "--mirror MIRROR", "Look for isos at MIRROR") do |opt|
            options.mirror = opt
          end

          opts.on("-H", "--headless", "Run providers as headless") do |opt|
            options.headless = opt
          end

          opts.on("-v VERSION", "--version VERSION", "Override the version set in the template") do |opt|
            options.override_version = opt
          end
        },
        argv: templates_argv_proc
      },
      list: {
        class: ListRunner,
        parser: OptionParser.new { |opts|
          opts.banner = "Usage: #{NAME} list [TEMPLATE ...]"
        },
        argv: templates_argv_proc
      },
      normalize: {
        class: NormalizeRunner,
        parser: OptionParser.new { |opts|
          opts.banner = "Usage: #{NAME} normalize TEMPLATE[ TEMPLATE ...]"

          opts.on("-d", "--[no-]debug", "Run packer with debug output") do |opt|
            options.debug = opt
          end
        },
        argv: templates_argv_proc
      },
      test: {
        class: TestRunner,
        parser: OptionParser.new { |opts|
          opts.banner = "Usage: #{NAME} test [options]"

          opts.on("-f", "--shared-folder", "Enable shared folder") do |opt|
            options.shared_folder = opt
          end

          opts.on("-p", "--provisioner PROVISIONER", "Use a specfic provisioner") do |opt|
            options.provisioner = opt
          end
        },
        argv: Proc.new {}
      },
      upload: {
        class: UploadRunner,
        parser: OptionParser.new { |opts|
          opts.banner = "Usage: #{NAME} upload"
        },
        argv: box_version_argv_proc
      },
      release: {
        class: ReleaseRunner,
        parser: OptionParser.new { |opts|
          opts.banner = "Usage: #{NAME} release BOX VERSION"
        },
        argv: box_version_argv_proc
      },
      revoke: {
        class: RevokeRunner,
        parser: OptionParser.new { |opts|
          opts.banner = "Usage: #{NAME} revoke BOX VERSION"
        },
        argv: box_version_argv_proc
      },
      delete: {
        class: DeleteRunner,
        parser: OptionParser.new { |opts|
          opts.banner = "Usage: #{NAME} delete BOX VERSION"
        },
        argv: box_version_argv_proc
      }
    }

    global.order!
    command = args.empty? ? :help : ARGV.shift.to_sym
    subcommand.fetch(command).fetch(:parser).order!
    subcommand.fetch(command).fetch(:argv).call(options)

    options.command = command
    options.klass = subcommand.fetch(command).fetch(:class)

    options
  end

  def self.calculate_templates(globs)
    Array(globs).
      map { |glob| result = Dir.glob(glob); result.empty? ? glob : result }.
      flatten.
      sort.
      delete_if { |file| file =~ /\.variables\./ }.
      map { |template| template.sub(/\.json$/, '') }
  end
end

module Common

  def banner(msg)
    puts "==> #{msg}"
  end

  def info(msg)
    puts "    #{msg}"
  end

  def warn(msg)
    puts ">>> #{msg}"
  end

  def duration(total)
    total = 0 if total.nil?
    minutes = (total / 60).to_i
    seconds = (total - (minutes * 60))
    format("%dm%.2fs", minutes, seconds)
  end

  def box_metadata(metadata_file)
    metadata = Hash.new
    file = File.read(metadata_file)
    json = JSON.parse(file)

    # metadata needed for upload:  boxname, version, provider, box filename
    metadata['name'] = json['name']
    metadata['version'] = json['version']
    metadata['box_basename'] = json['box_basename']
    metadata['providers'] = Hash.new
    json['providers'].each do |provider|
      metadata['providers'][provider['name']] = provider.reject { |k, _| k == 'name' }
    end
    metadata
  end

  def metadata_files
    @metadata_files ||= compute_metadata_files
  end

  def compute_metadata_files
    `ls builds/*.json`.split("\n")
  end

  def atlas_api
    @atlas_api ||= 'https://atlas.hashicorp.com/api/v1'
  end

  def atlas_org
    @atlas_org ||= ENV['ATLAS_ORG']
  end

  def atlas_token
    @atlas_token ||= ENV['ATLAS_TOKEN']
  end

  def s3_endpoint
    @s3_endpoint ||= ENV['BENTO_S3_ENDPOINT']
  end

  def s3_bucket
    @s3_bucket ||= ENV['BENTO_S3_BUCKET']
  end

  def private_box?(boxname)
    proprietary_os_list = %w(macosx sles solaris windows)
    proprietary_os_list.any? { |p| boxname.include?(p) }
  end
end

module HttpStuff

  def class_for_request(verb)
    Net::HTTP.const_get(verb.to_s.capitalize)
  end

  def build_uri(verb, path, params = {})
    if %w(delete, get).include?(verb)
      path = [path, to_query_string(params)].compact.join('?')
    end

    # Parse the URI
    uri = URI.parse(path)

    # Don't merge absolute URLs
    uri = URI.parse(File.join(endpoint, path)) unless uri.absolute?

    # Return the URI object
    uri
  end

  def to_query_string(hash)
    hash.map do |key, value|
      "#{CGI.escape(key)}=#{CGI.escape(value)}"
    end.join('&')[/.+/]
  end

  def request(verb, url, data = {}, headers = {})
    uri = build_uri(verb, url, data)

    # Build the request.
    request = class_for_request(verb).new(uri.request_uri)
    if %w(patch post put delete).include?(verb)
      if data.respond_to?(:read)
        request.content_length = data.size
        request.body_stream = data
      elsif data.is_a?(Hash)
        request.form_data = data
      else
        request.body = data
      end
    end

    # Add headers
    headers.each do |key, value|
      request.add_field(key, value)
    end

    connection = Net::HTTP.new(uri.host, uri.port)

    if uri.scheme == 'https'
      require 'net/https' unless defined?(Net::HTTPS)

      # Turn on SSL
      connection.use_ssl = true
      connection.verify_mode = OpenSSL::SSL::VERIFY_PEER
    end

    connection.start do |http|
      response = http.request(request)

      case response
      when Net::HTTPRedirection
        redirect = URI.parse(response['location'])
        request(verb, redirect, data, headers)
      else
        response
      end
    end
  end
end

module PackerExec

  def for_packer_run_with(template)
    Tempfile.open("#{template}-metadata.json") do |md_file|
      Tempfile.open("#{template}-metadata-var-file") do |var_file|
        write_box_metadata(template, md_file)
        write_var_file(template, md_file, var_file)
        yield md_file, var_file
      end
    end
  end

  def write_box_metadata(template, io)
    md = BuildMetadata.new(template, build_timestamp, override_version).read

    io.write(JSON.pretty_generate(md))
    io.close
  end

  def write_var_file(template, md_file, io)
    md = BuildMetadata.new(template, build_timestamp, override_version).read

    io.write(JSON.pretty_generate({
      box_basename:     md[:box_basename],
      build_timestamp:  md[:build_timestamp],
      git_revision:     md[:git_revision],
      metadata:         md_file.path,
      version:          md[:version]
    }))
    io.close
  end
end

class BuildRunner

  include Common
  include PackerExec

  attr_reader :templates, :dry_run, :debug, :builds, :except, :mirror, :headless, :override_version, :build_timestamp

  def initialize(opts)
    @templates = opts.templates
    @dry_run = opts.dry_run
    @debug = opts.debug
    @builds = opts.builds
    @except = opts.except
    @mirror = opts.mirror
    @headless = opts.headless
    @override_version = opts.override_version
    @build_timestamp = Time.now.gmtime.strftime("%Y%m%d%H%M%S")
  end

  def start
    banner("Starting build for templates: #{templates}")
    time = Benchmark.measure do
      templates.each { |template| build(template) }
    end
    banner("Build finished in #{duration(time.real)}.")
  end

  private

  def build(template)
    for_packer_run_with(template) do |md_file, var_file|
      cmd = packer_build_cmd(template, var_file.path)
      banner("[#{template}] Building: '#{cmd.join(' ')}'")
      time = Benchmark.measure do
        system(*cmd) or raise "[#{template}] Error building, exited #{$?}"
        write_final_metadata(template)
      end
      banner("[#{template}] Finished building in #{duration(time.real)}.")
    end
  end

  def packer_build_cmd(template, var_file)
    vars = "#{template}.variables.json"
    cmd = %W[packer build -var-file=#{var_file} #{template}.json]
    cmd.insert(2, "-var-file=#{vars}") if File.exist?(vars)
    cmd.insert(2, "-only=#{builds}") if builds
    cmd.insert(2, "-except=#{except}") if except
    # Build the command line in the correct order and without spaces as future input for the splat operator.
    cmd.insert(2, "mirror=#{mirror}") if mirror
    cmd.insert(2, "-var") if mirror
    cmd.insert(2, "headless=true") if headless
    cmd.insert(2, "-var") if headless
    cmd.insert(2, "-debug") if debug
    cmd.insert(0, "echo") if dry_run
    cmd
  end

  def write_final_metadata(template)
    md = BuildMetadata.new(template, build_timestamp, override_version).read
    path = File.join(File.dirname(__FILE__), "..", "builds")
    filename = File.join(path, "#{md[:box_basename]}.metadata.json")

    md[:providers] = ProviderMetadata.new(path, md[:box_basename]).read

    if dry_run
      banner("(Dry run) Metadata file contents would be something similar to:")
      puts JSON.pretty_generate(md)
    else
      File.open(filename, "wb") { |file| file.write(JSON.pretty_generate(md)) }
    end
  end
end

class NormalizeRunner

  include Common
  include PackerExec

  attr_reader :templates, :build_timestamp, :debug, :override_version

  def initialize(opts)
    @templates = opts.templates
    @debug = opts.debug
    @modified = []
    @build_timestamp = Time.now.gmtime.strftime("%Y%m%d%H%M%S")
  end

  def start
    banner("Normalizing for templates: #{templates}")
    time = Benchmark.measure do
      templates.each do |template|
        validate(template)
        fix(template)
      end
    end
    if !@modified.empty?
      info("")
      info("The following templates were modified:")
      @modified.sort.each { |template| info("  * #{template}")}
    end
    banner("Normalizing finished in #{duration(time.real)}.")
  end

  private

  def checksum(file)
    Digest::MD5.file(file).hexdigest
  end

  def fix(template)
    file = "#{template}.json"

    banner("[#{template}] Fixing")
    original_checksum = checksum(file)
    output = %x{packer fix #{file}}
    raise "[#{template}] Error fixing, exited #{$?}" if $?.exitstatus != 0
    # preserve ampersands in shell commands,
    # see: https://github.com/mitchellh/packer/issues/784
    output.gsub!("\\u0026", "&")
    File.open(file, "wb") { |dest| dest.write(output) }
    fixed_checksum = checksum(file)

    if original_checksum == fixed_checksum
      puts("No changes made.")
    else
      warn("Template #{template} has been modified.")
      @modified << template
    end
  end

  def packer_validate_cmd(template, var_file)
    vars = "#{template}.variables.json"
    cmd = %W[packer validate -var-file=#{var_file} #{template}.json]
    cmd.insert(2, "-var-file=#{vars}") if File.exist?(vars)
    cmd
  end

  def validate(template)
    for_packer_run_with(template) do |md_file, var_file|
      cmd = packer_validate_cmd(template, var_file.path)
      banner("[#{template}] Validating: '#{cmd.join(' ')}'")
      if debug
        banner("[#{template}] DEBUG: var_file(#{var_file.path}) is:")
        puts IO.read(var_file.path)
        banner("[#{template}] DEBUG: md_file(#{md_file.path}) is:")
        puts IO.read(md_file.path)
      end
      system(*cmd) or raise "[#{template}] Error validating, exited #{$?}"
    end
  end
end

class TestRunner
  include Common

  attr_reader :shared_folder, :boxname, :provider, :box_url, :share_disabled, :provisioner

  def initialize(opts)
    @debug = opts.debug
    @shared_folder = opts.shared_folder
    @provisioner = opts.provisioner.nil? ? "shell" : opts.provisioner
  end

  def start
    banner("Starting testing...")
    time = Benchmark.measure do
      metadata_files.each do |metadata_file|
        m = box_metadata(metadata_file)
        destroy_all_bento
        test_box(m['name'], m['providers'])
        destroy_all_bento
      end
    end
    banner("Testing finished in #{duration(time.real)}.")
  end

  private

  def destroy_all_bento
    cmd = Mixlib::ShellOut.new("vagrant box list | grep 'bento-'")
    cmd.run_command
    boxes = cmd.stdout.split("\n")

    boxes.each do |box|
      b = box.split(' ')
      rm_cmd = Mixlib::ShellOut.new("vagrant box remove --force #{b[0]} --provider #{b[1].to_s.gsub(/(,|\()/, '')}")
      banner("Removing #{b[0]} for provider #{b[1].to_s.gsub(/(,|\()/, '')}")
      rm_cmd.run_command
    end
  end

  def test_box(boxname, providers)
    providers.each do |provider, provider_data|

      plugin_list = Mixlib::ShellOut.new("vagrant plugin list | awk '{print $1}'")
      plugin_list.run_command
      plugins = plugin_list.stdout.split("\n")

      if provider == 'vmware_desktop'
        case
        when plugins.include?('vagrant-vmware-workstation')
          provider = 'vmware_workstation'
        when plugins.include?('vagrant-vmware-fusion')
          provider = 'vmware_fusion'
        end
      end

      @boxname = boxname
      @provider = provider
      @share_disabled = shared_folder ? false : true
      @box_url = "file://#{ENV['PWD']}/builds/#{provider_data['file']}"

      kitchen_cfg = ERB.new(File.read('.kitchen.yml.erb'), nil, '-').result(binding)
      File.open(".kitchen.#{provider}.yml", "w") { |f| f.puts kitchen_cfg }

      Kitchen.logger = Kitchen.default_file_logger
      @loader = Kitchen::Loader::YAML.new(project_config: "./.kitchen.#{provider}.yml")
      config = Kitchen::Config.new(loader: @loader)
      config.instances.each do |instance|
        instance.test(:always)
      end
    end
  end
end

class DeleteRunner
  include Common
  include HttpStuff

  attr_reader :boxname, :version

  def initialize(opts)
    @boxname = opts.box
    @version = opts.version
  end

  def start
    banner("Starting Delete...")
    time = Benchmark.measure do
      delete_version(boxname, version)
    end
    banner("Delete finished in #{duration(time.real)}.")
  end

  private

  def delete_version(boxname, version)
    banner("Deleting version #{version} of box #{boxname}")
    req = request('delete', "#{atlas_api}/box/#{atlas_org}/#{boxname}/version/#{version}", { 'access_token' => atlas_token }, { 'Content-Type' => 'application/json' })

    case req.code
    when '200'
      banner("Version #{version} of box #{boxname} has been successfully deleted")
    when '404'
      warn("No box exists for this version")
    else
      warn("Something went wrong #{req.code}")
    end
  end
end

class ReleaseRunner
  include Common
  include HttpStuff

  attr_reader :boxname, :version

  def initialize(opts)
    @boxname = opts.box
    @version = opts.version
  end

  def start
    banner("Starting Release...")
    time = Benchmark.measure do
      release_version(boxname, version)
    end
    banner("Release finished in #{duration(time.real)}.")
  end

  private

  def release_version(boxname, version)
    case status(boxname, version)
    when 'unreleased'
      banner("Releasing version #{version} of box #{boxname}")
      req = request('put', "#{atlas_api}/box/#{atlas_org}/#{boxname}/version/#{version}/release", { 'access_token' => atlas_token }, { 'Content-Type' => 'application/json' })
      if req.code == '200'
        banner("Version #{version} of box #{boxname} has been successfully released")
      else
        warn("Something went wrong #{req.code}")
      end
    when 'active'
      banner("Version #{version} of box #{boxname} has already been released - nothing to do")
    else
      warn("Unexpected status retrieved from Atlas")
    end
  end

  def status(boxname, version)
    req = request('get', "#{atlas_api}/box/#{atlas_org}/#{boxname}/version/#{version}", { 'access_token' => atlas_token }, { 'Content-Type' => 'application/json' })
    status = JSON.parse(req.body)['status']
  end
end

class RevokeRunner
  include Common
  include HttpStuff

  attr_reader :boxname, :version

  def initialize(opts)
    @boxname = opts.box
    @version = opts.version
  end

  def start
    banner("Starting Revoke...")
    time = Benchmark.measure do
      revoke_version(boxname, version)
    end
    banner("Revoke finished in #{duration(time.real)}.")
  end

  private

  def revoke_version(boxname, version)
    banner("Revoking version #{version} of box #{boxname}")
    req = request('put', "#{atlas_api}/box/#{atlas_org}/#{boxname}/version/#{version}/revoke", { 'access_token' => atlas_token }, { 'Content-Type' => 'application/json' })
    if req.code == '200'
      banner("Version #{version} of box #{boxname} has been successfully revoked")
    else
      banner("Something went wrong #{req.code}")
    end
  end
end

class UploadRunner
  include Common
  include HttpStuff

  attr_reader :templates

  def initialize(opts)
    @templates = opts.templates
  end

  def start
    banner("Starting uploads...")
    time = Benchmark.measure do
      metadata_files.each do |metadata_file|
        metadata = box_metadata(metadata_file)
        create_box(metadata['name'])
        create_box_version(metadata['name'], metadata['version'])
        create_providers(metadata['name'], metadata['version'], metadata['providers'].keys)
        upload_to_atlas(metadata['name'], metadata['version'], metadata['providers'])
        upload_to_s3(metadata['name'], metadata['version'], metadata['providers'])
      end
    end
    banner("Atlas uploads finished in #{duration(time.real)}.")
  end

  private

  def create_box(boxname)
    req = request('get', "#{atlas_api}/box/#{atlas_org}/#{boxname}", { 'box[username]' => atlas_org, 'access_token' => atlas_token } )
    if req.code.eql?('404')
      if private_box?(boxname)
        banner("Creating the private box #{boxname} in Atlas.")
        req = request('post', "#{atlas_api}/boxes", { 'box[name]' => boxname, 'box[username]' => atlas_org, 'access_token' => atlas_token }, { 'Content-Type' => 'application/json' } )
      else
        banner("Creating the box #{boxname} in Atlas.")
        req = request('post', "#{atlas_api}/boxes", { 'box[name]' => boxname, 'box[username]' => atlas_org, 'access_token' => atlas_token }, { 'Content-Type' => 'application/json' } )
        make_public(boxname)
      end
    else
      banner("The box #{boxname} exists in atlas, continuing...")
    end
  end

  def make_public(boxname)
    banner("Making #{boxname} public")
    req = request('put', "#{atlas_api}/box/#{atlas_org}/#{boxname}", { 'box[is_private]' => false, 'access_token' => atlas_token }, { 'Content-Type' => 'application/json' } )
    banner("#{boxname} successfully made public") if req.code == '200'
  end

  def create_box_version(boxname, version)
    req = request('post', "#{atlas_api}/box/#{atlas_org}/#{boxname}/versions", { 'version[version]' => version, 'access_token' => atlas_token },{ 'Content-Type' => 'application/json' } )

    banner("Created box version #{boxname} #{version}.") if req.code == '200'
    banner("Box version #{boxname} #{version} already exists, continuing.") if req.code == '422'
  end

  def create_providers(boxname, version, provider_names)
    provider_names.each do |provider|
      banner("Creating provider #{provider} for #{boxname} #{version}")
      req = request('post', "#{atlas_api}/box/#{atlas_org}/#{boxname}/version/#{version}/providers", { 'provider[name]' => provider, 'access_token' => atlas_token }, { 'Content-Type' => 'application/json' }  )
      banner("Created #{provider} for #{boxname} #{version}") if req.code == '200'
      banner("Provider #{provider} for #{boxname} #{version} already exists, continuing.") if req.code == '422'
    end
  end

  def upload_to_atlas(boxname, version, providers)
    providers.each do |provider, provider_data|
      boxfile = provider_data['file']
      req = request('get', "#{atlas_api}/box/#{atlas_org}/#{boxname}/version/#{version}/provider/#{provider}/upload?access_token=#{atlas_token}")
      upload_path = JSON.parse(req.body)['upload_path']
      token = JSON.parse(req.body)['token']

      banner("Atlas: Uploading #{boxfile}")
      info("Name: #{boxname}")
      info("Version: #{version}")
      info("Provider: #{provider}")
      info("Upload Path: #{upload_path}")
      upload_request = request('put', upload_path, File.open("builds/#{boxfile}"))

      req = request('get', "#{atlas_api}/box/#{atlas_org}/#{boxname}/version/#{version}/provider/#{provider}?access_token=#{atlas_token}")
      hosted_token = JSON.parse(req.body)['hosted_token']

      if token == hosted_token
        banner("Successful upload of box #{boxfile}")
      else
        banner("Failed upload due to non-matching tokens of box #{boxfile} to atlas box: #{boxname}, version: #{version}, provider: #{provider}")
        warn("Code: #{req.code}")
        warn("Body: #{req.body}")
      end
    end

    def upload_to_s3(boxname, version, providers)
      providers.each do |provider, provider_data|
        boxfile = provider_data['file']
        provider = 'vmware' if provider == 'vmware_desktop'
        box_path = "vagrant/#{provider}/opscode_#{boxname}_chef-provisionerless.box"
        credentials = Aws::Credentials.new(ENV['AWS_ACCESS_KEY_ID'], ENV['AWS_SECRET_ACCESS_KEY'])

        s3 = Aws::S3::Resource.new(credentials: credentials, endpoint: s3_endpoint)
        banner("S3: Uploading #{boxfile}")
        info("Name: #{boxname}")
        info("Version: #{version}")
        info("Provider: #{provider}")
        s3_object = s3.bucket(s3_bucket).object(box_path)
        s3_object.upload_file("builds/#{boxfile}", acl:'public-read')
        banner("Upload Path: #{s3_object.public_url}")
      end
    end
  end
end

class ListRunner

  include Common

  attr_reader :templates

  def initialize(opts)
    @templates = opts.templates
  end

  def start
    templates.each { |template| puts template }
  end
end

class Runner

  attr_reader :options

  def initialize(options)
    @options = options
  end

  def start
    options.klass.new(options).start
  end
end

class BuildMetadata

  def initialize(template, build_timestamp, override_version)
    @template = template
    @build_timestamp = build_timestamp
    @override_version = override_version
  end

  def read
    {
      name:             name,
      version:          version,
      build_timestamp:  build_timestamp,
      git_revision:     git_revision,
      box_basename:     box_basename,
      template:         template_vars.fetch("template", UNKNOWN),
    }
  end

  private

  UNKNOWN = "__unknown__".freeze

  attr_reader :template, :build_timestamp, :override_version

  def box_basename
    "#{name.gsub("/", "__")}-#{version}.git.#{git_revision}"
  end

  def git_revision
    sha = %x{git rev-parse HEAD}.strip

    git_clean? ? sha : "#{sha}_dirty"
  end

  def git_clean?
    %x{git status --porcelain}.strip.empty?
  end

  def merged_vars
    @merged_vars ||= begin
      if File.exist?("#{template}.variables.json")
        template_vars.merge(JSON.load(IO.read("#{template}.variables.json")))
      else
        template_vars
      end
    end
  end

  def name
    merged_vars.fetch("name", template)
  end

  def template_vars
    @template_vars ||= JSON.load(IO.read("#{template}.json")).fetch("variables")
  end

  def version
    if override_version
       override_version
    else
    merged_vars.fetch("version", "#{UNKNOWN}.TIMESTAMP").
      rpartition(".").first.concat(".#{build_timestamp}")
    end
  end
end

class ProviderMetadata

  def initialize(path, box_basename)
    @base = File.join(path, box_basename)
  end

  def read
    Dir.glob("#{base}.*.box").map do |file|
      {
        name: provider_from_file(file),
        file: "#{File.basename(file)}",
        checksum_type: "sha256",
        checksum: shasum(file)
      }
    end
  end

  private

  attr_reader :base

  def provider_from_file(file)
    case provider = file.sub(/^.*\.([^.]+)\.box$/, '\1')
    when /vmware/i then "vmware_desktop"
    else provider
    end
  end

  def shasum(file)
    Digest::SHA256.file(file).hexdigest
  end
end

begin
  Runner.new(Options.parse(ARGV)).start
rescue => ex
  $stderr.puts ">>> #{ex.message}"
  exit(($? && $?.exitstatus) || 99)
end
