
variable "_DOWNLOAD_SITE" {
  type    = string
  default = "http://www.oracle.com/technetwork/server-storage/solaris11/downloads/index.html"
}

variable "_README" {
  type    = string
  default = "You must download the automated installer iso from the following page, and then place it in the packer_cache dir"
}

variable "arch" {
  type    = string
  default = "64"
}

variable "box_basename" {
  type    = string
  default = "solaris-11.3"
}

variable "build_directory" {
  type    = string
  default = "../../builds"
}

variable "cpus" {
  type    = string
  default = "2"
}

variable "disk_size" {
  type    = string
  default = "65536"
}

variable "git_revision" {
  type    = string
  default = "__unknown_git_revision__"
}

variable "guest_additions_url" {
  type    = string
  default = ""
}

variable "headless" {
  type    = string
  default = ""
}

variable "memory" {
  type    = string
  default = "2048"
}

variable "mirror" {
  type    = string
  default = "./packer_cache"
}

variable "name" {
  type    = string
  default = "solaris-11.3"
}

variable "qemu_display" {
  type    = string
  default = "none"
}

variable "template" {
  type    = string
  default = "solaris-11.3-x86"
}

variable "version" {
  type    = string
  default = "TIMESTAMP"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

locals {
  build_timestamp = "${legacy_isotime("20060102150405")}"
  http_directory  = "${path.root}/http"
}

source "virtualbox-iso" "autogenerated_1" {
  boot_command            = ["e<wait>", "<down><down><down><down><down><wait>", "<end><wait>", "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><wait>", "false<wait>", "<f10><wait>", "<wait10><wait10><wait10><wait10><wait10><wait10>", "<wait10><wait10><wait10><wait10><wait10><wait10>", "<wait10><wait10><wait10><wait10><wait10><wait10>", "root<enter><wait><wait>", "solaris<enter><wait><wait>", "<wait10>", "while (true); do sleep 5; test -f /a/etc/sudoers && grep -v \"vagrant\" \"/a/etc/sudoers\" 2> /dev/null<wait>", " && echo \"vagrant ALL=(ALL) NOPASSWD: ALL\" >> /a/etc/sudoers && break ; done &<enter><wait>", "<enter>while (true); do grep \"You may wish to reboot\" \"/var/svc/log/application-auto-installer:default.log\" 2> /dev/null<wait>", " && reboot; sleep 10; done &<enter><wait>", "sleep 5; curl http://{{ .HTTPIP }}:{{ .HTTPPort }}/default.xml -o default.xml;<wait>", "curl http://{{ .HTTPIP }}:{{ .HTTPPort }}/profile.xml -o profile.xml;<wait>", "cp default.xml /system/volatile/ai.xml;<wait>", "mkdir /system/volatile/profile;<wait>", "cp profile.xml /system/volatile/profile/profile.xml;<wait>", "svcadm enable svc:/application/auto-installer:default;<wait>", "<enter><wait10><wait><wait>", "<enter><wait>", "tail -f /var/svc/log/application-auto-installer\\:default.log<enter><wait>"]
  boot_wait               = "5s"
  cpus                    = "${var.cpus}"
  disk_size               = "${var.disk_size}"
  guest_additions_mode    = "attach"
  guest_additions_url     = "${var.guest_additions_url}"
  guest_os_type           = "Solaris11_64"
  headless                = "${var.headless}"
  http_directory          = "${local.http_directory}"
  iso_checksum            = "md5:30d9ae857f62938c21307722d031e0dc"
  iso_url                 = "${var.mirror}/sol-11_3-ai-x86.iso"
  memory                  = "${var.memory}"
  output_directory        = "packer-solaris-11.3-x86_64-virtualbox"
  shutdown_command        = "echo 'vagrant'|sudo -i init 5"
  shutdown_timeout        = "10m"
  ssh_password            = "vagrant"
  ssh_port                = 22
  ssh_timeout             = "10000s"
  ssh_username            = "vagrant"
  virtualbox_version_file = ".vbox_version"
  vm_name                 = "${var.template}"
}

source "vmware-iso" "autogenerated_2" {
  boot_command     = ["e<wait>", "<down><down><down><down><down><wait>", "<end><wait>", "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><wait>", "false<wait>", "<f10><wait>", "<wait10><wait10><wait10><wait10><wait10><wait10>", "<wait10><wait10><wait10><wait10><wait10><wait10>", "<wait10><wait10><wait10><wait10><wait10><wait10>", "root<enter><wait><wait>", "solaris<enter><wait><wait>", "<wait10>", "while (true); do sleep 5; test -f /a/etc/sudoers && grep -v \"vagrant\" \"/a/etc/sudoers\" 2> /dev/null<wait>", " && echo \"vagrant ALL=(ALL) NOPASSWD: ALL\" >> /a/etc/sudoers && break ; done &<enter><wait>", "<enter>while (true); do grep \"You may wish to reboot\" \"/var/svc/log/application-auto-installer:default.log\" 2> /dev/null<wait>", " && reboot; sleep 10; done &<enter><wait>", "sleep 5; curl http://{{ .HTTPIP }}:{{ .HTTPPort }}/default.xml -o default.xml;<wait>", "curl http://{{ .HTTPIP }}:{{ .HTTPPort }}/profile.xml -o profile.xml;<wait>", "cp default.xml /system/volatile/ai.xml;<wait>", "mkdir /system/volatile/profile;<wait>", "cp profile.xml /system/volatile/profile/profile.xml;<wait>", "svcadm enable svc:/application/auto-installer:default;<wait>", "<enter><wait10><wait><wait>", "<enter><wait>", "tail -f /var/svc/log/application-auto-installer\\:default.log<enter><wait>"]
  boot_wait        = "5s"
  cpus             = "${var.cpus}"
  disk_size        = "${var.disk_size}"
  guest_os_type    = "solaris11-64"
  headless         = "${var.headless}"
  http_directory   = "${local.http_directory}"
  iso_checksum     = "md5:30d9ae857f62938c21307722d031e0dc"
  iso_url          = "${var.mirror}/sol-11_3-ai-x86.iso"
  memory           = "${var.memory}"
  output_directory = "packer-solaris-11.3-x86_64-vmware"
  shutdown_command = "echo 'vagrant'|sudo -i init 5"
  shutdown_timeout = "10m"
  ssh_password     = "vagrant"
  ssh_port         = 22
  ssh_timeout      = "10000s"
  ssh_username     = "vagrant"
  vm_name          = "${var.template}"
  vmx_data = {
    "cpuid.coresPerSocket" = "1"
  }
  vmx_remove_ethernet_interfaces = true
}

build {
  sources = ["source.virtualbox-iso.autogenerated_1", "source.vmware-iso.autogenerated_2"]

  provisioner "shell" {
    execute_command   = "echo 'vagrant'|sudo -S bash {{ .Path }}"
    expect_disconnect = true
    scripts           = ["${path.root}/scripts/update.sh", "${path.root}/scripts/vagrant.sh", "${path.root}/scripts/vmtools.sh", "${path.root}/scripts/minimize.sh"]
  }

  post-processor "vagrant" {
    output = "${var.build_directory}/${var.box_basename}.<no value>.box"
  }
}
