---
on:
  workflow_call:

permissions:
  contents: read

env:
  PACKER_GITHUB_API_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  # PACKER_LOG: "1"

jobs:
  x86_64:
    runs-on: [self-hosted, X64, vmware]
    strategy:
      fail-fast: false
      matrix:
        os:
          - almalinux-8
          - almalinux-9
          - almalinux-10
          - centos-stream-9
          - centos-stream-10
          - debian-12
          - debian-13
          - fedora-41
          - fedora-42
          - freebsd-13
          - freebsd-14
          - opensuse-leap-15
          - opensuse-leap-16
          - oraclelinux-8
          - oraclelinux-9
          - oraclelinux-10
          - rockylinux-8
          - rockylinux-9
          - rockylinux-10
          - ubuntu-22.04
          - ubuntu-24.04
          - ubuntu-25.04
          - ubuntu-25.10
        provider:
          - vmware-iso
    steps:
      - name: Checkout
        uses: actions/checkout@main
#      - name: Setup Packer
#        if: steps.verify-changed-files.outputs.files_changed == 'true'
#        uses: hashicorp/setup-packer@main
#        with:
#          version: latest
      - name: Bento build
        run: |
          eval "$(chef shell-init bash)"
          bento build -o ${{ matrix.provider }}.vm os_pkrvars/$(echo ${{ matrix.os }} | cut -d "-" -f 1)/"${{ matrix.os }}-x86_64.pkrvars.hcl"
          ls -alh builds/build_complete/
          cat builds/build_complete/${{ matrix.os }}*-x86_64._metadata.json
      - name: Remove VM in case of canceled job
        if: cancelled()
        run: |
          # Set your VM directory path
          VM_DIR="$HOME/Documents/Virtual Machines.localized"
          # VM name to search for (case-sensitive)
          TARGET_VM_NAME="${{ matrix.os }}"
          # List all VMs
          echo "Listing all VMs in $VM_DIR..."
          VM_PATHS=$(find "$VM_DIR" -name "*.vmx")
          # Loop through each VM and match by name
          for VMX in $VM_PATHS; do
            if grep -q "$TARGET_VM_NAME" <<< "$VMX"; then
              echo "Found VM: $VMX"
              # Stop the VM
              echo "Stopping VM..."
              vmrun stop "$VMX" soft
              # Wait a bit to ensure it's stopped
              sleep 5
              # Delete the VM directory
              VM_FOLDER=$(dirname "$VMX")
              echo "Deleting VM folder: $VM_FOLDER"
              rm -rf "$VM_FOLDER"
              echo "VM '$TARGET_VM_NAME' has been stopped and deleted."
            fi
          done
      - name: Bento Test
        run: |
          eval "$(chef shell-init bash)"
          bento test
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }}-parallels-x86_64"
          path: |
            builds/build_complete/*.box
            builds/build_complete/*.json
          overwrite: true
          retention-days: 10
          compression-level: 0 # no compression
